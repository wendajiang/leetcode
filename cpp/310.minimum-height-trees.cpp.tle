/*
 * @lc app=leetcode id=310 lang=cpp
 *
 * [310] Minimum Height Trees
 *
 * https://leetcode.com/problems/minimum-height-trees/description/
 *
 * algorithms
 * Medium (31.17%)
 * Likes:    1498
 * Dislikes: 85
 * Total Accepted:    83.7K
 * Total Submissions: 266K
 * Testcase Example:  '4\n[[1,0],[1,2],[1,3]]'
 *
 * For an undirected graph with tree characteristics, we can choose any node as
 * the root. The result graph is then a rooted tree. Among all possible rooted
 * trees, those with minimum height are called minimum height trees (MHTs).
 * Given such a graph, write a function to find all the MHTs and return a list
 * of their root labels.
 * 
 * Format
 * The graph contains n nodes which are labeled from 0 to n - 1. You will be
 * given the number n and a list of undirected edges (each edge is a pair of
 * labels).
 * 
 * You can assume that no duplicate edges will appear in edges. Since all edges
 * are undirected, [0, 1] is the same as [1, 0] and thus will not appear
 * together in edges.
 * 
 * Example 1 :
 * 
 * 
 * Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]
 * 
 * ⁠       0
 * ⁠       |
 * ⁠       1
 * ⁠      / \
 * ⁠     2   3 
 * 
 * Output: [1]
 * 
 * 
 * Example 2 :
 * 
 * 
 * Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]
 * 
 * ⁠    0  1  2
 * ⁠     \ | /
 * ⁠       3
 * ⁠       |
 * ⁠       4
 * ⁠       |
 * ⁠       5 
 * 
 * Output: [3, 4]
 * 
 * Note:
 * 
 * PPPPPPPPPPPPPPPPPPPPPP
 * According to the definition of tree on Wikipedia: “a tree is an undirected
 * graph in which any two vertices are connected by exactly one path. In other
 *P words, any connected graph without simple cycles is a tree.”
 * The height of a rooted tree is the number of edges on the longest downward
 * path between the root and a leaf.
 P* 
 * 
 */
#include <bits/stdc++.h>
using namespace std;
//solve by finding tree(graph) center point
// @lc code=start
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        int nums_of_edges = edges.size();
        vector<vector<int>> dist(n, vector<int>(n, n));
        set<pair<int, int>> uedges;
        for (int i = 0; i < nums_of_edges; i++) {
            dist[edges[i][0]][edges[i][1]] = 1;
            dist[edges[i][1]][edges[i][0]] = 1;
        }
        floyed(n, dist);
        
        vector<int> ecc(n, 0);
        for (int i = 0; i < ecc.size(); i++) {
            int tmp = 0;
            for (int j = 0; j < n; j++) {
                if (tmp < dist[i][j] && dist[i][j] < n) tmp = dist[i][j];
            }
            ecc[i] = tmp;
        }

        int min_radius = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (ecc[i] < min_radius) {
                min_radius = ecc[i];
            }
        }
        vector<int> res;

        for (int i = 0; i < n; i++) {
            if (min_radius == ecc[i]) {
                res.push_back(i);
            }
        }
        return res;
     
    }
    void floyed(int n, vector<vector<int>>& dist) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (i != j)
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        } 
    }
};
// @lc code=end
